{"version":3,"file":"sidebar-info-lXhGjFPQ.js","sources":["../../src/js/components/header.js","../../src/js/components/burger-menu.js","../../src/js/services/api.js","../../src/js/components/sidebar-info.js"],"sourcesContent":["const headerNavRef = document.querySelector('.js-header-nav');\n\nconst { pathname } = window.location;\n\nif (pathname.includes('favorites')) {\n  headerNavRef\n    .querySelector('[data-path=\"favorites\"]')\n    ?.classList.add('link--active');\n} else {\n  headerNavRef\n    .querySelector('[data-path=\"home\"]')\n    ?.classList.add('link--active');\n}\n","const mobileMenu = document.querySelector('[data-burger]');\nconst openMenuBtn = document.querySelector('[data-burger-open]');\nconst closeMenuBtn = document.querySelector('[data-burger-close]');\n\nconst toggleMenu = () => {\n  const isMenuOpen =\n    openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n  openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n  mobileMenu.classList.toggle('menu-is-hidden');\n};\n\nopenMenuBtn.addEventListener('click', toggleMenu);\ncloseMenuBtn.addEventListener('click', toggleMenu);\n\nwindow.matchMedia('(min-width: 768px)').addEventListener('change', e => {\n  if (!e.matches) return;\n  mobileMenu.classList.add('menu-is-hidden');\n  openMenuBtn.setAttribute('aria-expanded', false);\n});\n","import axios from 'axios';\n\nexport const axiosInstance = axios.create({\n  baseURL: 'https://your-energy.b.goit.study/api/',\n});\n\n/**\n * Fetches a list of exercises based on the provided filtering parameters.\n *\n * @async\n * @function getExercises\n * @param {Object} [args]\n * @param {Object} [args.params] - Object containing filtering parameters.\n * @param {string} [args.params.bodypart] - body part for search exercises by body part.\n * @param {string} [args.params.muscles] - muscle for search exercises by muscle.\n * @param {string} [args.params.equipment] - equipment for search exercises by equipment.\n * @param {string} [args.params.keyword] - keyword for search by exercise name.\n * @param {number} [args.params.page] - number page of the exercises.\n * @param {number} [args.params.limit] - limit for the exercises.\n * @param {AbortSignal} [args.signal] - An AbortSignal to optionally cancel the request.\n * @returns {Promise<{\n *      page: number;\n *      perPage: number;\n *      totalPages: number;\n *      results: Array<{\n *          _id: string;\n *          bodyPart: string;\n *          equipment: string;\n *          gifUrl: string;\n *          name: string;\n *          target: string;\n *          description: string;\n *          rating: number;\n *          burnedCalories: number;\n *          time: number;\n *          popularity: number;\n *      }>}>} - Returns a promise that resolves to an array of exercise objects.\n */\nexport async function getExercises(args) {\n  \n  const { params, signal } = args ?? {};\n  const { page = 1, limit = 10, ...otherParams } = params ?? {};\n\n  const { data } = await axiosInstance.get('exercises', {\n    params: {\n      ...otherParams,\n      page,\n      limit,\n    },\n    signal,\n  });\n  return data;\n}\n\n/**\n * Fetches details of a specific exercise by its ID.\n *\n * @async\n * @function getExerciseById\n * @param {Object} args - Object containing function arguments.\n * @param {string} args.exerciseId - The ID of the exercise to fetch.\n * @param {AbortSignal} [args.signal] - An AbortSignal to optionally cancel the request.\n * @returns {Promise<{\n *      _id: string;\n *      bodyPart: string;\n *      equipment: string;\n *      gifUrl: string;\n *      name: string;\n *      target: string;\n *      description: string;\n *      rating: number;\n *      burnedCalories: number;\n *      time: number;\n *      popularity: number;\n * }>} - Returns a promise that resolves to an object containing exercise details.\n */\nexport async function getExerciseById({ exerciseId, signal }) {\n  const { data } = await axiosInstance.get(`exercises/${exerciseId}`, {\n    signal,\n  });\n  return data;\n}\n\n/**\n * Adds rating and review for a specific exercise.\n *\n * @async\n * @function addExerciseRating\n * @param {Object} args - Object containing function arguments.\n * @param {string} args.exerciseId - The ID of the exercise to rate.\n * @param {Object} args.body - Object containing rating details.\n * @param {number} args.body.rate - The rating value (e.g., 5).\n * @param {string} args.body.email - The email of the user submitting the rating.\n * @param {string} args.body.review - The user's review of the exercise.\n * @returns {Promise<{\n *      _id: string;\n *      bodyPart: string;\n *      equipment: string;\n *      gifUrl: string;\n *      name: string;\n *      target: string;\n *      description: string;\n *      rating: number;\n *      burnedCalories: number;\n *      time: number;\n *      popularity: number;\n * }>} - Returns a promise that resolves to the updated exercise details.\n */\nexport async function addExerciseRating({ exerciseId, body }) {\n  const { data } = await axiosInstance.patch(\n    `exercises/${exerciseId}/rating`,\n    body\n  );\n  return data;\n}\n\n/**\n * Fetches filter options based on the provided parameters.\n *\n * @async\n * @function getFilters\n * @param {Object} [args] - Object containing function arguments.\n * @param {Object} [args.params] - Object containing filtering parameters.\n * @param {string} [args.params.filter] - Filter criteria for fetching filter options.\n * @param {number} [args.params.page] - Page number for the filter options.\n * @param {number} [args.params.limit] - Limit for the number of filter options returned per page.\n * @param {AbortSignal} [args.signal] - An AbortSignal to optionally cancel the request.\n * @returns {Promise<{\n *      page: number;\n *      perPage: number;\n *      totalPages: number;\n *      results: Array<{\n *          filter: string;\n *          name: string;\n *          imgURL: string;\n * }>}>} - Returns a promise that resolves to an object containing filters.\n */\nexport async function getFilters(args) {\n  const { params, signal } = args ?? {};\n  const { page = 1, limit = 12, ...otherParams } = params ?? {};\n\n  const { data } = await axiosInstance.get('filters', {\n    params: {\n      ...otherParams,\n      page,\n      limit,\n    },\n    signal,\n  });\n  return data;\n}\n\n/**\n * Fetches a random quote from the API.\n *\n * @async\n * @function getQuote\n * @param {Object} [args] - Object containing function arguments.\n * @param {AbortSignal} [args.signal] - An AbortSignal to optionally cancel the request.\n * @returns {Promise<{\n *      author: string;\n *      quote: string;\n * }>} - Returns a promise that resolves to an object containing quote.\n */\nexport async function getQuote(args) {\n  const { signal } = args ?? {};\n  const { data } = await axiosInstance.get(`quote`, { signal });\n  return data;\n}\n\n/**\n * Creates a new subscription with the provided details.\n *\n * @async\n * @function createSubscription\n * @param {Object} args - Object containing function arguments.\n * @param {Object} args.body - Object containing subscription details.\n * @param {string} args.body.email - The email address of the subscriber.\n * @returns {Promise<{\n *      message: string;\n * }>} - Returns a promise that resolves to the response from the server, confirming the subscription creation.\n */\nexport async function createSubscription({ body }) {\n  const { data } = await axiosInstance.post(`subscription`, body);\n  return data;\n}\n","import { getQuote } from '../services/api.js';\n\n\nfunction sidebarInfo() {\n    let storedQuote = localStorage.getItem('quote');\n    const today = new Date().getDate();\n\n    if (!storedQuote) {\n        getQuote().then((data) => {\n            \n            data.date = today; // Добавляем дату в объект цитаты\n            localStorage.setItem('quote', JSON.stringify(data));\n            updateQuote(data);\n        });\n    } else {\n        const dataQuote = JSON.parse(storedQuote);\n        \n        // Проверка, что цитата не устарела\n        if (dataQuote.date !== today) {\n            getQuote().then((data) => {\n                data.date = today;\n                localStorage.setItem('quote', JSON.stringify(data));\n                updateQuote(data);\n            });\n        } else {\n            updateQuote(dataQuote);\n        }\n    }\n}\n\nfunction updateQuote(dataQuote) {\n    const sidebarInfo = document.querySelector('.p_quote_text');\n    sidebarInfo.innerHTML = dataQuote.quote;\n\n    const sidebarInfoAuthor = document.querySelector('.p_quote_author');\n    sidebarInfoAuthor.innerHTML = dataQuote.author;\n}\n\nsidebarInfo();\n"],"names":["headerNavRef","pathname","_a","_b","mobileMenu","openMenuBtn","closeMenuBtn","toggleMenu","isMenuOpen","axiosInstance","axios","getExercises","args","params","signal","page","limit","otherParams","data","getExerciseById","exerciseId","addExerciseRating","body","getFilters","getQuote","createSubscription","sidebarInfo","storedQuote","today","updateQuote","dataQuote","sidebarInfoAuthor"],"mappings":"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"}